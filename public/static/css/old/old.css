
/**
 * Design Tokens
 */
:root {
	/** Sizes */
	--size-tab: 4ch;
	--size-fluid: 4vw;
	--size-text-max: 50ch;
	--size-text-min: 25ch;
	--size-gap: 1em;
	--size-padding: 0.5ex;
	--size-border: max(0.2ex, 2px);
	--size-radius: var(--size-padding);
	--size-variable: clamp(var(--size-gap), var(--size-fluid), var(--size-tab));
	--size-control: calc(
		(var(--size-border) + var(--size-padding)) * 2 + (1em * var(--type-leading-text))
	);
	/* Layout Sizes */
	--size-column-primary-min:		50%;
	--size-column-primary-min:		66.666%;
	--size-column-secondary-min:	calc( var(--size-text-min) * 1.3333 );
	--size-column-secondary-ideal:	33.3333%;

	/**
	 * Typography
	 */

	/* Line-Height */
	--type-leading-text: 1.6;
	--type-leading-title: 1.35;

	/* Font-Family */
	--type-family-text: system-ui;
	--type-family-code: monospace;

	/** Data URIs */
	--uri-up: url("data:image/svg+xml;utf8,<svg fill='none' stroke='white' xmlns='http://www.w3.org/2000/svg' viewBox='0 0 8 8'><path d='M6 5 4 3 2 5'/></svg>");
	--uri-down: url("data:image/svg+xml;utf8,<svg fill='none' stroke='white' xmlns='http://www.w3.org/2000/svg' viewBox='0 0 8 8'><path d='M6 3 4 5 2 3'/></svg>");
	--uri-left: url("data:image/svg+xml;utf8,<svg fill='none' stroke='white' xmlns='http://www.w3.org/2000/svg' viewBox='0 0 8 8'><path d='M5 2 3 4l2 2'/></svg>");
	--uri-right: url("data:image/svg+xml;utf8,<svg fill='none' stroke='white' xmlns='http://www.w3.org/2000/svg' viewBox='0 0 8 8'><path d='m3 2 2 2-2 2'/></svg>");
	--uri-menu: url("data:image/svg+xml;utf8,<svg fill='none' stroke='white' xmlns='http://www.w3.org/2000/svg' viewBox='0 0 8 8'><path d='M1 6h6M1 4h6M1 2h6'/></svg>");
	--uri-play: url("data:image/svg+xml;utf8,<svg fill='white' stroke='white' xmlns='http://www.w3.org/2000/svg' viewBox='0 0 8 8'><path d='m3 3 2 1-2 1 0-2z'/></svg>");
	--uri-pause: url("data:image/svg+xml;utf8,<svg fill='none' stroke='white' xmlns='http://www.w3.org/2000/svg' viewBox='0 0 8 8'><path d='M3 2v4M5 2v4'/></svg>");
	--uri-check: url("data:image/svg+xml;utf8,<svg fill='none' stroke='white' xmlns='http://www.w3.org/2000/svg' viewBox='0 0 8 8'><path d='m2 4 2 1 2-3'/></svg>");
	--uri-close: url("data:image/svg+xml;utf8,<svg fill='none' stroke='white' xmlns='http://www.w3.org/2000/svg' viewBox='0 0 8 8'><path d='m2 2 4 4M2 6 6 2'/></svg>");

	/**
	 * Colors
	 */

	/** Dark Theme */
	--color-foreground-primary-dark: hsl(60, 50%, 97%);
	--color-background-primary-dark: hsl(249, 11%, 12%);
	--color-background-secondary-dark: hsl(0, 0%, 21%);
	--color-background-control-dark: hsl(247, 10%, 18%);
	--color-background-field-dark: hsl(247, 10%, 18%);
	--color-foreground-link-dark: hsl(196, 100%, 53%);
	--color-border-dark: hsl(250, 3%, 47%);

	/** Light Theme */
	--color-foreground-primary-light: hsl(0, 0%, 0%);
	--color-background-primary-light: hsl(0, 0%, 96%);
	--color-background-secondary-light: hsl(30, 10%, 96%);
	--color-background-control-light: hsl(240, 10%, 92%);
	--color-background-field-light: hsl(240, 10%, 92%);
	--color-foreground-link-light: hsl(240, 100%, 43%);
	--color-border-light: hsl(0, 0%, 43%);
}
/** Color Token Assignment */

/** Dark Theme */
@media (prefers-color-scheme: dark) {
	:root {
		--color-foreground-primary: var(--color-foreground-primary-dark);
		--color-background-primary: var(--color-background-primary-dark);
		--color-background-secondary: var(--color-background-secondary-dark);
		--color-background-control: var(--color-background-control-dark);
		--color-background-field: var(--color-background-field-dark);
		--color-foreground-link: var(--color-foreground-link-dark);
		--color-border: var(--color-border-dark);
	}
}
/** Light Theme */
@media (prefers-color-scheme: light) {
	:root {
		--color-foreground-primary: var(--color-foreground-primary-light);
		--color-background-primary: var(--color-background-primary-light);
		--color-background-secondary: var(--color-background-secondary-light);
		--color-background-control: var(--color-background-control-light);
		--color-background-field: var(--color-background-field-light);
		--color-foreground-link: var(--color-foreground-link-light);
		--color-border: var(--color-border-light);
	}
}

/**
 * Reset
 */

*,
*::before,
*::after {
	margin: 0;
	padding: 0;
	font: inherit;
	background: inherit;
	box-sizing: border-box;
}
img,
video,
audio,
picture {
	display: block;
	max-inline-size: 100%;
}
/** Display Adjustments */
/**	Display properties can now be set 
	using the `dialog` element selector
	without preventing closed dialogs 
	from remaining visible */
dialog:not([open]) {
	display: none;
}
/** Cursor/Pointer Adjustments	*/
[disabled], [aria-disabled='true'] {
	/**	By default, browsers only
		use color to distinguish
		disabled elements, which
		is not accessible. */
	cursor: not-allowed;
}

button,
select,
input:where([type="button"], [type="reset"], [type="submit"], [type="color"]),
::file-selector-button,
summary {
	/**	Interactive content should
		be easily distinguished by
		a 'pointer' cursor. */
	cursor: pointer;
}

/**	By default, the label after the
	file selector button also opens
	the file browser dialog when 
	clicked. This is unintuitive
	and disorienting. */
input[type="file"] {
	/** Remove pointer events from 
		the whole input */
	pointer-events: none;
}
::file-selector-button {
	/**	Then add them back on just
		the button */
	pointer-events: auto;
}

/* Textarea */
textarea {
	overflow-y:	auto;
	resize:		vertical;
}










/*
 * Layout
 */

/* Body Layout */

/* Keep footer at bottom of page and stretch main content
 * to fill remaining page height
 */
html {
	block-size:			100%;
}
body {
	min-block-size:		100%;
	display:			grid;
	grid-template-rows:	min-content 1fr min-content;
}

body > :where(header, main, footer) {
	display:			flex;
	flex-wrap:			wrap;
}




/* Main Header and Footer Item Positioning */

:where(body, main) > :where(header, footer) {
	align-items:		center;
	justify-content:	space-between;
	padding:			var(--size-gap);
}

/* Main Content Layout */

main {
	display:				flex;
	flex-wrap:				wrap;
}





/* Content Column Layout */

main > :where(article, aside) {
	--size-column-max:		var(--size-text-max);
	display:				grid;
	gap:					var(--size-gap) 0;
	grid-template-columns:	[margin-start]	1fr 
							[content-start]	min(var(--size-column-max), 100%) 
							[content-end]	1fr	[margin-end];
}

main > article > header {
	display:	inherit;
	gap:		inherit;
}

/* Content Column Sizing */

/* Primary Content Columns */

main > :where(header, footer) {
	display:	flex;
	flex-wrap:	wrap;
	flex-basis: 100%;
	padding-inline: var(--size-variable);
}

main > :where(article):only-of-type {
	flex-basis:			0;
	flex-grow:			999;
	min-inline-size:	var(--size-column-primary-min);
	align-content:		center;
}
main > :where(article):not(:only-of-type) {
	flex-basis:			100%;
}

/* Secondary Content Columns */

main > :where(aside):last-child:only-of-type {
	flex-basis:			clamp(var(--size-column-secondary-min), var(--size-column-secondary-ideal), 100%);
	flex-grow:			1;
/*	align-content:		end;*/
	align-content:		start;
}

main > :where(form):only-child {
	flex-basis:			100%;
}

main > :where(nav):first-child {
	flex-basis:		min-content;
	flex-grow:		1;
	display:		flex;
	gap:			var(--size-padding) var(--size-gap);
	flex-direction:	column;
}

/* Content Column Item Positioning */

main > :where(article, aside) > :where(figure, blockquote) {
	grid-column:			margin-start / margin-end;
}

main > :where(article, aside) > :where(:not(figure, blockquote)) {
	grid-column:			content-start / content-end;
}

/* Content Column Spacing */

main > :where(article, aside, form, nav) {
	padding:				var(--size-variable);
	gap:					var(--size-variable) 0;
}




/* Figure Layout */

figure, figcaption {
	display:		flex;
}

figure {
	display:			flex;
	gap:				var(--size-gap);
	justify-content:	center;
	align-items:		center;
	flex-wrap:			wrap-reverse;
	max-inline-size:	100%;
	margin-block:		clamp(var(--size-gap), var(--size-fluid), var(--size-tab));
}

figcaption {
	gap:				var(--size-gap);
	flex-wrap:			wrap;
	font-size:			smaller;
	flex-direction:		column;
	flex-grow:			1;
	flex-basis: var(--size-text-min);
	max-inline-size: var(--size-text-max);
}


figure pre {
	overflow-x:			auto;
	font-size:			smaller;
	line-height:		var(--type-leading-title);
	tab-size:			4;
	border:				var(--size-border) solid var(--color-border);
	padding:			var(--size-gap);
	background-color:	var(--color-background-field);
}

figure pre code ol {
	list-style-position:	inside;
}
figure pre code ol ::marker {
	color:				var(--color-border);
}

figure audio {
	order: -1;
}


/* Navigation Layout */

nav {
	display: flex;
	gap: var(--size-padding) var(--size-gap);
}

nav > :where(menu, ul, ol) {
	display:	flex;
	flex-wrap:	wrap;
	gap:		var(--size-padding) var(--size-gap);
}
nav > :where(menu, ul, ol) > li {
	list-style:	none;
}

/* Form Layout */

form {
	display:					grid;
	gap:						var(--size-gap);
	align-items:				stretch;
	align-self:					start;
	grid-template-columns:		[start] max-content [middle] 1fr [end];
	grid-auto-rows:				max-content;
	grid-auto-flow:				dense;
}

form br {
	display: none;
}

/* Form Element Layout */

fieldset {
	display:		contents;
}

form > :where(p, ul, h1, h2, h3, h4, h5, h6), fieldset > :where(legend) {
	/* Full-width Elements */
	grid-column:	start / end;
}
fieldset > :where(label),
form > :where(:not(label, fieldset, legend, p, ul, h1, h2, h3, h4, h5, h6)) {
	grid-column:	middle / end;
}
fieldset > :where(:not(label, fieldset, legend, p, ul)) {
	justify-self:	end;
}
form > :where(label), 
fieldset > :where(:not(label, fieldset, legend, p, ul)) {
	grid-column:	start / middle;
}

form > :where(p, ul) {
	justify-self:			end;
	margin-block-start:		calc( 0em - var(--size-gap) );
	font-size:				smaller;
}

@media (max-width: 80ch) {

	form {
		gap:				0 var(--size-gap);
	}

	form > * {
		grid-column:		start / end;
		margin-block-end:	var(--size-gap);
	}

}


/*
 * Form Elements
 */

input, select, textarea {
	inline-size:		100%;
	overflow:			hidden;
	text-overflow:		ellipsis;
}

/* Element Spacing */

input:where(:not([type='file'])), 
select, 
textarea, 
button, 
::file-selector-button {
	appearance:		none;
	line-height:	var(--type-leading-text);
	padding:		var(--size-padding);
	border:			var(--size-border) solid var(--color-border);
	border-radius:	var(--size-radius);
}

label, legend {
	margin-block:	calc( var(--size-padding) + var(--size-border) );
	line-height:	var(--type-leading-text);
	vertical-align: bottom;
}

/* Focus Styles */
:where(input:where(:not([type='file'])), 
select, 
textarea, 
button):focus-visible, 
:focus-visible::file-selector-button {
	outline: 0;
	--color-border:	currentColor;
}

input[type='file']:focus-visible {
	outline:		0;
}

/* Invalid Styles */
:where(input:where(:not([type='file'])), 
select, 
textarea, 
button)[data-invalid], 
[data-invalid]::file-selector-button {
	--color-border:	ActiveText;
}


/*
 * Form Fields
 * 	Form Fields generally contain
 * 	user-editable content
 */

input:where(:not([type])),
input:where(
	[type='text'],
	[type='email'],
	[type='url'],
	[type='search'],
	[type='password'],
	[type='number'],
	[type='tel'],
	[type='time'],
	[type='date'],
	[type='datetime-local'],
	[type='week'],
	[type='month'],
	[type='checkbox'],
	[type='radio']
),
textarea,
select:where([multiple]) {
	/* Form Fields */
	background-color:		var(--color-background-field);
	color:					var(--color-foreground-field);
}

/* Checkboxes and Radio Buttons */
input:where(
	[type='checkbox'],
	[type='radio']
) {
	block-size:		var(--size-control);
	inline-size:	var(--size-control);
}
input:where(
	[type='checkbox'],
	[type='radio']
):checked {
	/* Checked Input Styles */
}



/*
 * Form Controls
 * 	Form Controls are  generally
 * 	interactive 
 */

button,
input:where(
	[type='button'],
	[type='reset'],
	[type='submit']
	[type='color'],
),
::file-selector-button,
select:where(:not([multiple])) {
	/* Form Controls */
	background-color:		var(--color-background-control);
	color:					var(--color-foreground-control);
}
form > :where(button,
input:where(
	[type='button'],
	[type='reset'],
	[type='submit']
)){
	justify-self: end;
}

/* File Selector Button */

::file-selector-button {
	margin-inline-end:	var(--size-gap);
	block-size:			100%;
	font-size:			100%;
} 




/**
 * Typography
 */

:root {
	font: 150% / var(--type-leading-text) var(--type-family-text);
}

main > :where(aside) {
	font-size: smaller;
}

code {
	font-family: var(--type-family-code);
}

:where(p, li) > code {
	outline:		var(--size-border) solid var(--color-border);
	border-radius:	var(--size-radius);
	outline-offset:	0.25ch;
	margin-inline:	0.5ch;
}

/* Text Blocks */
p {
	hyphens: auto;
}

form > :where(label), fieldset > :where(legend) {
	font-weight:	bold;
}



/* Headings */

h1, h2, h3, h4, h5, h6 {
	font-weight:	bold;
	line-height:	var(--type-leading-title);
}

h1 {
	font-size: clamp(1.25em, var(--size-fluid), 2.25em);
}
h2 {
	font-size: clamp(1.125em, var(--size-fluid), 1.5em);
}
h3 {
	font-size: clamp(1em, var(--size-fluid), 1.25em);
}

nav > :where(h1, h2, h3, h4, h5, h6) {
	font-size:	1em;
	white-space: nowrap;
}

:where(h1, h2, h3, h4, h5, h6) > em {
	font-style: normal;
	font-weight: 400;
}


/* Hyperlinks */
:any-link {
	color: inherit;
	text-decoration-color: var(--color-border);
	text-decoration-thickness: var(--size-border);
	text-underline-offset:	var(--size-border);
}

:any-link:where(:hover, :active, :focus, [aria-current='page']) {
	text-decoration-color: var(--color-foreground-link);
}

a:link {}
a:visited {}
a:hover {}
a:active {}

a:focus-visible {
	outline: var(--size-border) solid var(--color-foreground-link);
	outline-offset: var(--size-border);
	text-decoration: none;
}





:root {
	background-color: var(--color-background-primary);
	color: var(--color-foreground-primary);
}
/* experimental: for temporary use only */

hr {
	margin-block:	var(--size-gap);
	flex-basis: 100%;
	grid-column: 1 / -1;
}

dl {
	gap: calc( var(--size-gap) / 2 ) var(--size-tab);
	display: grid;
	grid-template-columns: max-content 1fr;
	align-items: start;
}

dt {
	flex-basis: 100%;
}

dt {
	font-weight: bold;
}

dd dt {
	font-weight: normal;
}

dd dd {
	font-style: italic;
}

article > header:first-child, main > article:where(:not(:only-of-type)) {
	gap: 1rem;
}

dd ul {
	gap: 0 var(--size-gap);
	display: flex;
	flex-wrap: wrap;
	list-style: none;
}

[disabled], [aria-disabled='true'] {
	opacity: 0.5;
}
